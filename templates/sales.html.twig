{% extends 'base.html.twig' %}

{% block title %}{{ 'app.sales.title'|trans }} | {{ parent() }}{% endblock %}

{% block stylesheets %}{{ parent() }}
		<style>
		.item {
			user-select: none;
		}
		</style>
{%- endblock %}

{% block container_type %}container-fluid{% endblock %}

{% block menu %}{% endblock %}

{% block _order_simple_lines_entry_row %}
{%- set item = form.vars.data.item %}
			<div class="item-root
					{%- if (item.isVariant and (item.variantOf.variants.count > 1)) or item.isPack %} d-none" data-is-variant="true
					{%- endif -%}
				" data-id="{{ item.id }}" data-content-ids="{{ (item.isPack ? item.composedOf|map(i => i.id) : [item.id])|json_encode }}" data-layout-toggle="item-root col
					{%- if (item.isVariant and (item.variantOf.variants.count > 1)) or item.isPack %} d-none{% endif -%}
				" data-category-id="
					{{- ((item.isVariant ? item.variantOf.id) ~ ' ' ~ (item.category and (item.attributes.empty or item.variants.empty) ? item.category.id))|trim -}}
			">
				<div style="{% if item.colour %}background-color: {{ item.colour }} !important; {% endif %}{% if item.isPack %}{{ pack_gradient(item.composedOf) }}; {% elseif item.variants.count > 1 %}{{ variants_gradient(item.variants)}}; {% endif %}color: var(--bs-{{ item.colour ? (is_dark(item.colour) ? 'light' : 'dark') : 'body-color' }});" title="{{ item.title }}" data-layout-toggle="card h-100">
					<div class="row" data-layout-toggle="card-body">
						<label for="{{ form.quantity.vars.id }}" class="col-4 col-sm-3 col-md-2 h1 text-center item" data-layout-toggle="card-title h1 w-100 text-center item">{{ item.label }}</label>
						<div class="item-text col-sm-3 col-md-4 d-none d-sm-block item d-flex align-self-center" data-layout-toggle="item-text text-center item mb-2" {% if item.isPack or item.variants.count > 1 %} style="text-shadow: 0 0 3px var(--bs-{{ item.colour ? (is_dark(item.colour) ? 'dark' : 'light') : 'body-color' }})"{% endif %}>{{ item.title }}</div>
						{% if item.attributes.empty or item.variants.empty %}
						<div class="col-3 col-sm-2 text-end item align-self-center" data-layout-toggle="card-text col-4 text-end item align-self-center float-start pe-1 py-1">{{ item.price|number_format(2, ',') }}</div>
						<div class="col-2 px-0 d-flex align-items-center" data-layout-toggle="card-text col-8 ps-0 float-end ps-1">
							{% if item.ticket %}
							<div class="input-group input-group-sm">
							{% endif %}
							{{- form_widget(form.quantity, {'attr': {
								'class': 'form-control-sm text-end',
								'style': 'background-color: inherit; color: var(--bs-' ~ (item.colour ? (is_dark(item.colour) ? 'light' : 'dark') : 'body-color') ~ '); min-width: 3em;',
								'data-item': item|json_encode}}) -}}
							{% if item.ticket %}
								<span class="input-group-text border-4 py-0 p-1" style="{% if item.colour %}background-color: {{ item.colour }} !important; {% endif %}color: var(--bs-{{ item.colour ? (is_dark(item.colour) ? 'light' : 'dark') : 'body-color' }});">{{ 'app.fields.item.ticket.label.short'|trans }}</span>
							</div>
							{% endif %}
						</div>
						<output name="_{{ form.quantity.vars.id }}" id="_{{ form.quantity.vars.id }}" class="col-3 col-sm-2 text-end item item-total align-self-center" data-layout-toggle="card-text text-end item item-total w-100 align-self-center pe-2">0,00</output>
						{% endif %}
					</div>
				</div>
			</div>
{% endblock %}

{% form_theme form _self %}

{% block body %}
	{{ form_start(form) }}
		{#- Placeholder is not styled along the choices, some options are not copied to it.
		Therefore, mere inline options instead of buttons -#}
		{{ form_row(form.categories, {
			'label_attr': {'class': 'radio-inline'},
			'row_attr': {
				'class': 'sticky-top pt-3 mb-3 h3',
				'style': 'background-color: var(--bs-body-bg);'
			},
			'attr': {
				'class': 'categories',
				'data-layout': 'table'
			},
			'help': '<hr class="row mt-3 mb-0" />',
			'help_html': true,
		}) }}
		{{ form_widget(form.lines, {'attr': {'data-layout-toggle': 'row row-cols-2 row-cols-sm-3 row-cols-md-4 row-cols-lg-5 row-cols-xl-6 g-2'}}) }}
		<div class="row sticky-bottom pb-3 mt-3" style="background-color: var(--bs-body-bg);">
			<hr />
			<div class="col-5">
				<div class="btn-group" role="group">
					<input type="radio" checked="checked" name="direction" id="Adder" class="btn-check" value="1" /><label for="Adder" class="btn btn-outline-success">‚ûï</label>
					<input type="radio" name="direction" id="Remover" class="btn-check" value="-1" /><label for="Remover" class="btn btn-outline-warning">‚ûñ</label>

					<div class="btn-group dropup" role="group">
						<button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">üé®</button>
						<ul class="dropdown-menu">
							<li class="d-none d-sm-block" data-layout-toggle=""><button type="button" id="TextToggler" class="dropdown-item">{{ 'app.fields.item.label.label.short'|trans }}<span class="item-text visually-hidden">¬†„Ä∞Ô∏è</span></button></li>
							<li><button type="button" id="LayoutToggler" class="dropdown-item" data-content-possible="{&quot;table&quot;:&quot;‚ñ¶&quot;,&quot;deck&quot;:&quot;‚ñ§&quot;}">‚ñ¶</button></li>
							<li><button type="button" id="ThemeToggler" class="dropdown-item" data-content-possible="{&quot;light&quot;:&quot;üåô&quot;,&quot;dark&quot;:&quot;‚òÄÔ∏è&quot;}"></button></li>
						</ul>
					</div>
					{% if is_granted('IS_AUTHENTICATED_FULLY') %}<a href="{{ path('sales_summary') }}" target="_blank" class="btn btn-outline-secondary">üßæ</a>{% endif %}
					<button type="reset" class="btn btn-danger" title="{{ 'global.action.reset'|trans }}" aria-label="{{ 'global.action.reset'|trans }}">üßπ</button>
				</div>
			</div>
			<div class="col-3 text-end">{% if is_granted('IS_AUTHENTICATED_FULLY') %}
				{%- if form.paymentMethod.children|length == 1 -%}
					<button type="submit" class="btn btn-primary float-start validator" name="{{ form.paymentMethod.vars.full_name }}" value="{{ form.paymentMethod.children[0].vars.value }}" disabled="disabled">{{ 'global.action.validate'|trans }}</button>
					{%- do form.paymentMethod.children[0].setRendered(true) -%}
				{%- else -%}
					<div class="btn-group dropup" role="group">
						<button type="button" class="btn btn-outline-primary dropdown-toggle validator" disabled="disabled" data-bs-toggle="dropdown" aria-expanded="false" title="{{ 'global.action.validate'|trans }}" aria-label="{{ 'global.action.validate'|trans }}">‚úîÔ∏è</button>
						<ul class="dropdown-menu">
							{% for i,child in form.paymentMethod.children %}
							<li><button type="submit" class="dropdown-item display-6 validator" name="{{ form.paymentMethod.vars.full_name }}" value="{{ child.vars.value }}" style="{% if child.vars.attr.style|length > 18 %}{{ child.vars.attr.style }} !important; {% endif %}color: var(--bs-{{ child.vars.attr.style|length > 18 ? (is_dark(child.vars.attr.style[18:]) ? 'light' : 'dark') : 'body-color' }});">{{ child.vars.label }}</button></li>
							{% do child.setRendered(true) %}
							{% endfor %}
						</ul>
					</div>
				{%- endif %}
				{%- else %}
					{%- do form.paymentMethod.setRendered(true) -%}
				{% endif %}¬†{{ 'app.sales.total'|trans }}</div>
			<output name="totalItems" id="totalItems" class="col-2 text-end">0</output>
			<output name="totalPrice" id="totalPrice" class="col-2 text-end">0,00</output>
		</div>
	{{ form_end(form) }}
{% endblock %}

{% block javascripts %}
	<script src="{{ asset('js/theme_handler.js')}}"></script>
	<script src="{{ asset('js/layout_handler.js')}}"></script>
	<script>//<![CDATA[
	{% if is_granted('IS_AUTHENTICATED_FULLY') -%}
	const channel = new BroadcastChannel('{{ app.user.token }}');
	{% endif -%}
	let previousCategory = document.querySelectorAll('.categories select, .categories [type="checkbox"]:checked, .categories [type="radio"]:checked').value;
	const order = {};
	document.querySelectorAll('[type="number"]').forEach( input => {
		const item = JSON.parse(input.dataset.item);
		item.quantity = 0;
		order[input.id] = item;
	});

	const submitDisabler = (disabled) => {
		Array.from(document.getElementsByClassName('validator')).forEach( submitter => {
			submitter.disabled = disabled;
		});
	}

	const categoryChangeListener = (event) => {
		if (event.target.value) {
			document.querySelectorAll('[data-category-id]:not([data-category-id~="' + event.target.value +'"])').forEach( item => {
				item.classList.add('d-none');
			});
			document.querySelectorAll('[data-category-id~="' + event.target.value +'"]').forEach( item => {
				item.classList.remove('d-none');
			});
		} else {
			document.querySelectorAll('.item-root:not([data-variant-of])').forEach( item => {
				item.classList.remove('d-none');
			});
			document.querySelectorAll('.item-root[data-is-variant]').forEach( item => {
				item.classList.add('d-none');
			});
			document.querySelectorAll('.categories .reset-remove').forEach( toRemove => {
				toRemove.remove();
			})
		}
		if (!event.target.closest('.reset-remove')) {
			document.querySelectorAll('.reset-remove').forEach( toRemove => {
				toRemove.remove();
			})
		}
	}

	Array.from(document.getElementsByClassName('categories')).forEach( container => {
		container.querySelectorAll('select, [type="checkbox"], [type="radio"]').forEach( input => {
			input.addEventListener('change', categoryChangeListener);
		});
	});

	Array.from(document.getElementsByClassName('item-root')).forEach( element => {
		element.addEventListener('click', event => {
			// Handles bubbling from inner elements. From input, dismiss
			if (event.target.tagName == 'INPUT') {
				event.stopPropagation();
				return;
			}
			const itemRoot = event.target.closest('.item-root');
			const input = itemRoot.querySelector('input[type="number"]');
			if (input) {
				switch (document.querySelector('input[name="direction"]:checked').value) {
					case "-1":
						input.stepDown();
						break;
					default:
						input.stepUp();
						break;
				}
				input.dispatchEvent(new Event('change'));
				event.preventDefault();
				const composedOf = Object.values(JSON.parse(itemRoot.dataset.contentIds));
				if (composedOf.length > 1) {
					document.querySelectorAll('[data-id="' + composedOf.join('"], [data-id="') + '"]').forEach( element => {
						element.dispatchEvent(new Event('click'));
					});
				}
			} else {
				const id = itemRoot.dataset.id;
				const style = itemRoot.querySelector('[style]').style;
				const backgroundColor = style.backgroundColor;
				const backgroundImage = style.backgroundImage;
				Array.from(document.getElementsByClassName('categories')).forEach( categoriesContainer => {
					const template = categoriesContainer.firstChild.cloneNode(true);
					template.classList.add('reset-remove');
					const input = template.querySelector('select, [type="checkbox"], [type="radio"]');
					template.querySelector('label').innerText = itemRoot.querySelector('label').innerText;
					template.querySelector('[value]').value = id;
					input.value = id;
					input.checked = true;
					template.style.backgroundImage = backgroundImage;
					template.classList.add('rounded');
					categoriesContainer.append(template);
					input.style.backgroundColor = backgroundColor;
					input.addEventListener('change', categoryChangeListener);
					input.dispatchEvent(new Event('change'));
				});
			}
			return false;
		});
	});
	document.querySelectorAll('input[type="number"]').forEach( element => {
		element.addEventListener('change', event => {
			const input = event.target;
			order[input.id].quantity = parseInt(input.value, 10);
			document.getElementById('_' + input.id).value = (order[input.id].quantity * order[input.id].price).toFixed(2).replace('.', ',');
			const totals = {
				quantity: 0,
				amount: 0
			};
			for (const id in order) {
				if (!order[id].pack) {
					totals.quantity += order[id].quantity;
					totals.amount += order[id].quantity * order[id].price;
				}
			};
			document.getElementById('totalItems').value = totals.quantity;
			document.getElementById('totalPrice').value = totals.amount.toFixed(2).replace('.', ',');
			submitDisabler(totals.quantity == 0);
			{% if is_granted('IS_AUTHENTICATED_FULLY') -%}
			debounceBroadcast('update', order);
			{%- endif ~%}
		});
	});

	document.querySelector('form').addEventListener('reset', event => {
		for (id in order) {
			order[id].quantity = 0;
		}
		document.querySelector('.categories :default').dispatchEvent(new Event('change'));
		submitDisabler(true);
		{% if is_granted('IS_AUTHENTICATED_FULLY') -%}
		debounceBroadcast('clear', {});
		{%- endif ~%}
	});
	{%- if is_granted('IS_AUTHENTICATED_FULLY') %}

	const debounce = (func, delay) => {
		let timeoutId;
		return (...args) => {
			clearTimeout(timeoutId);
			timeoutId = setTimeout(() => {
				func(...args);
			}, delay || 400);
		}
	}

	const debounceBroadcast = debounce((type, order) => {
		channel.postMessage({type, order});
	}, 400);
	{%- endif ~%}
	//]]></script>
{% endblock %}