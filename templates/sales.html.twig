{% extends 'base.html.twig' %}

{% block title %}{{ 'app.sales.title'|trans }} | {{ parent() }}{% endblock %}
{% block stylesheets %}{{ parent() }}
		<style>
		.item {
			user-select: none;
		}
		</style>{% endblock %}
{% block container_type %}container-fluid{% endblock %}

{% block menu %}{% endblock %}

{% block _order_simple_lines_entry_row %}
            <div data-layout-toggle="item col" data-category-id="{{ form.vars.data.item.category ? form.vars.data.item.category.id }}">
				<div style="{% if form.vars.data.item.colour %}background-color: {{ form.vars.data.item.colour }} !important; {% endif %}color: var(--bs-{{ form.vars.data.item.colour ? (is_dark(form.vars.data.item.colour) ? 'light' : 'dark') : 'body-color' }});" title="{{ form.vars.data.item.title }}" data-layout-toggle="card h-100">
					<div class="row" data-layout-toggle="card-body grid">
						<label for="{{ form.quantity.vars.id }}" class="col-4 col-sm-3 col-md-2 h1 text-center item" data-layout-toggle="card-title h1 w-100 text-center item">{{ form.vars.data.item.label }}</label>
						<div class="item-text col-sm-3 col-md-4 d-none d-sm-block item d-flex align-self-center" data-layout-toggle="item-text text-center item">{{ form.vars.data.item.title }}</div>
						<div class="col-3 col-sm-2 text-end item align-self-center" data-layout-toggle="card-text col-4 text-end item align-self-center float-start pe-1 py-1">{{ form.vars.data.item.price|number_format(2, ',') }}</div>
						<div class="col-2 px-0 d-flex align-items-center" data-layout-toggle="card-text col-8 ps-0 float-end ps-1">
							{% if form.vars.data.item.ticket %}
							<div class="input-group input-group-sm">
							{% endif %}
							{{- form_widget(form.quantity, {'attr': {
								'class': 'form-control-sm text-end',
								'style': 'background-color: inherit; color: ' ~ (is_dark(form.vars.data.item.colour) ? '#ffffff' : 'inherit') ~ '; min-width: 3em;',
								'data-item': form.vars.data.item|json_encode}}) -}}
							{% if form.vars.data.item.ticket %}
								<span class="input-group-text border-4 py-0 p-1" style="{% if form.vars.data.item.colour %}background-color: {{ form.vars.data.item.colour }} !important; {% endif %}color: var(--bs-{{ form.vars.data.item.colour ? (is_dark(form.vars.data.item.colour) ? 'light' : 'dark') : 'body-color' }});">üéüÔ∏è</span>
							</div>
							{% endif %}
						</div>
						<output name="_{{ form.quantity.vars.id }}" id="_{{ form.quantity.vars.id }}" class="col-3 col-sm-2 text-end item item-total align-self-center" data-layout-toggle="card-text text-end item item-total w-100 align-self-center pe-2">0,00</output>
					</div>
				</div>
			</div>
{% endblock %}

{% form_theme form _self %}

{% block body %}
	{{ form_start(form) }}
		{#- Placeholder is not styled along the choices, some options are not copied to it.
		Therefore, mere inline options instead of buttons -#}
		{{ form_row(form.categories, {
			'label_attr': {'class': 'radio-inline'},
			'row_attr': {
				'class': 'sticky-top pt-3 mb-3 h3',
				'style': 'background-color: var(--bs-body-bg);'
			},
			'attr': {'class': 'categories'},
			'help': '<hr class="row mt-3 mb-0" />',
			'help_html': true,
		}) }}
		{{ form_widget(form.lines, {'attr': {'data-layout-toggle': 'row row-cols-2 row-cols-sm-3 row-cols-md-4 row-cols-lg-5 row-cols-xl-6 g-2 align-middle'}}) }}
		<div class="row sticky-bottom pb-3 mt-3" style="background-color: var(--bs-body-bg);">
			<hr />
			<div class="col-5">
				<div class="btn-group" role="group">
					<input type="radio" checked="checked" name="direction" id="Adder" class="btn-check" value="1" /><label for="Adder" class="btn btn-outline-success">{{ 'global.action.new'|trans }}</label>
					<input type="radio" name="direction" id="Remover" class="btn-check" value="-1" /><label for="Remover" class="btn btn-outline-warning">‚ûñ</label>

					<div class="btn-group dropup" role="group">
						<button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">üé®</button>
						<ul class="dropdown-menu">
							<li class="d-none d-sm-block" data-layout-toggle=""><button type="button" id="TextToggler" class="dropdown-item" data-content-toggle="üñºÔ∏è&lt;span class=&quot;&quot;&gt;¬†„Ä∞Ô∏è&lt;/span&gt;">üñºÔ∏è<span class="d-none">¬†„Ä∞Ô∏è</span></button></li>
							<li><button type="button" id="LayoutToggler" class="dropdown-item" data-content-toggle="‚ñ§">‚ñ¶</button></li>
							<li><button type="button" id="ModeToggler" class="dropdown-item" data-content-possible="{&quot;light&quot;:&quot;üåô&quot;,&quot;dark&quot;:&quot;‚òÄÔ∏è&quot;}"></button></li>
						</ul>
					</div>
					{% if is_granted('IS_AUTHENTICATED_FULLY') %}<a href="{{ path('sales_summary') }}" target="_blank" class="btn btn-outline-secondary">üßæ</a>{% endif %}
					<button type="reset" class="btn btn-danger">{{ 'global.action.reset'|trans }}</button>
				</div>
			</div>
			<div class="col-3 text-end">{% if is_granted('IS_AUTHENTICATED_FULLY') %}<button type="submit" class="btn btn-primary">{{ 'global.action.validate'|trans }}</button>
				{% endif %}{{ 'app.sales.total'|trans }}</div>
			<output name="totalItems" id="totalItems" class="col-1 text-end">0</output>
			<output name="totalPrice" id="totalPrice" class="col-3 text-end">0,00</output>
		</div>
	{{ form_end(form) }}
{% endblock %}

{% block javascripts %}
	<script>//<![CDATA[
	{% if is_granted('IS_AUTHENTICATED_FULLY') -%}
	const channel = new BroadcastChannel('{{ app.user.token }}');
	{% endif -%}
	let previousCategory = document.querySelectorAll('.categories select, .categories [type="checkbox"]:checked, .categories [type="radio"]:checked').value;
	const order = {};
	Array.from(document.querySelectorAll('[type="number"]')).forEach( input => {
		const item = JSON.parse(input.dataset.item);
		item.quantity = 0;
		order[input.id] = item;
	});

	Array.from(document.getElementsByClassName('categories')).forEach( container => {
		container.querySelectorAll('select, [type="checkbox"], [type="radio"]').forEach( input => {
			input.addEventListener('change', event => {
				if (event.target.value) {
					document.querySelectorAll('[data-category-id]:not([data-category-id="' + event.target.value +'"])').forEach( item => {
						item.classList.add('d-none');
					});
					document.querySelectorAll('[data-category-id="' + event.target.value +'"]').forEach( item => {
						item.classList.remove('d-none');
					});
				} else {
					document.querySelectorAll('[data-category-id]').forEach( item => {
						item.classList.remove('d-none');
					});
				}
			});
		});
	});

	Array.from(document.getElementsByClassName('item')).forEach( element => {
		element.addEventListener('click', event => {
			const input = event.target.parentNode.querySelector('input[type="number"]');
			switch (document.querySelector('input[name="direction"]:checked').value) {
				case "-1":
					input.stepDown();
					break;
				default:
					input.stepUp();
					break;
			}
			input.dispatchEvent(new Event('change'));
			event.preventDefault();
			return false;
		});
	});
	Array.from(document.querySelectorAll('input[type="number"]')).forEach( element => {
		element.addEventListener('change', event => {
			const input = event.target;
			order[input.id].quantity = parseInt(input.value, 10);
			document.getElementById('_' + input.id).value = (order[input.id].quantity * order[input.id].price).toFixed(2).replace('.', ',');
			const totals = {
				quantity: 0,
				amount: 0
			};
			for (const id in order) {
				totals.quantity += order[id].quantity;
				totals.amount += order[id].quantity * order[id].price;
			};
			document.getElementById('totalItems').value = totals.quantity;
			document.getElementById('totalPrice').value = totals.amount.toFixed(2).replace('.', ',');
			{% if is_granted('IS_AUTHENTICATED_FULLY') -%}
			debounceBroadcast('update', order);
			{%- endif ~%}
		});
	});
	document.getElementById('LayoutToggler').addEventListener('click', event => {
		const button = event.target;
		const tempContent = button.dataset.contentToggle;
		button.dataset.contentToggle = button.innerText;
		button.innerText = tempContent;
		document.querySelectorAll('[data-layout-toggle]').forEach( element => {
			const temp = element.className;
			element.className = element.dataset.layoutToggle;
			element.dataset.layoutToggle = temp;
		});
	});
	document.getElementById('TextToggler').addEventListener('click', event => {
		let element = event.target;
		if (element.tagName === 'SPAN') {
			element = element.parentNode;
		}
		const tempContent = element.dataset.contentToggle;
		element.dataset.contentToggle = element.innerHTML;
		element.innerHTML = tempContent;
		document.querySelectorAll('.item-text').forEach( element => {
			element.classList.toggle('visually-hidden');
		});
	});

	document.querySelector('form').addEventListener('reset', event => {
		for (id in order) {
			order[id].quantity = 0;
		}
		document.querySelector('.categories :default').dispatchEvent(new Event('change'));
		{% if is_granted('IS_AUTHENTICATED_FULLY') -%}
		debounceBroadcast('clear', {});
		{%- endif ~%}
	});

	const setTheme = (theme) => {
		document.documentElement.setAttribute('data-bs-theme', theme);
		const themeSwitcher = document.getElementById('ModeToggler');
		const contentPossible = JSON.parse(themeSwitcher.dataset.contentPossible);
		themeSwitcher.innerText = contentPossible[theme];
	}
	
	const getTheme = () => {
		return document.documentElement.getAttribute('data-bs-theme');
	}

	const getPreferredTheme = () => {
		const theme = getTheme();
		if (['dark', 'light'].includes(theme)) {
			return theme;
		}

		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
	}

	setTheme(getPreferredTheme());

	const toggleTheme = (themeSwitcher) => {
		const tempContent = themeSwitcher.dataset.contentToggle;
		themeSwitcher.dataset.contentToggle = themeSwitcher.innerText;
		themeSwitcher.innerText = tempContent;

		const newTheme = getTheme() === 'light'
			? 'dark'
			: 'light';

		setTheme(newTheme);
	}

	document.getElementById('ModeToggler').addEventListener('click', event => {
		toggleTheme(event.target);
	});
	{%- if is_granted('IS_AUTHENTICATED_FULLY') %}

	const debounce = function(func, delay) {
		let timeoutId;
		return function(...args) {
			clearTimeout(timeoutId);
			timeoutId = setTimeout(() => {
				func(...args);
			}, delay || 400);
		}
	}

	const debounceBroadcast = debounce((type, order) => {
		channel.postMessage({type, order});
	}, 400);
	{%- endif ~%}
	//]]></script>
{% endblock %}