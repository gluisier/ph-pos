{% extends 'base.html.twig' %}

{% block title %}{{ app.user.name }} | {{ 'app.sales.title'|trans }} | {{ parent() }}{% endblock %}

{% block container_type %}container-fluid{% endblock %}

{% block menu %}{% endblock %}

{% block stylesheets %}
<style>
.has-ticket {
	position: relative;
}
.has-ticket::before {
	position: absolute;
	content: '{{ 'app.fields.item.ticket.label.short'|trans }}';
	transform: rotate(-45deg);
	top: 0;
	left: 0;
}
</style>
{% endblock %}

{% block body %}
	<div x-data="{
			order: {
				lines: {},
				get quantity() {
					let result = 0;
					for (const id in this.lines) {
						if (this.lines[id].isPack) continue;
						result += this.lines[id].quantity;
					}
					return result;
				},
				get tickets() {
					let result = 0;
					for (const id in this.lines) {
						if (!this.lines[id].ticket) continue;
						result += this.lines[id].quantity;
					}
					return result;
				},
				get amount() {
					let result = 0;
					for (const id in this.lines) {
						result += this.lines[id].amount;
					}
					return result;
				},
				find(id) {
					return this.lines.find(line => line.id == id);
				}
			},
			get actuallyOrdered() {
				let filtered = {};
				for (const id in this.order.lines) {
					const line = this.order.lines[id];
					if (line.quantity > 0 && !line.isPack) {
						filtered[id] = line;
					}
				}
				return filtered;
			},
			channel: new BroadcastChannel('{{ app.user.token }}'),
			init() {
				this.channel.addEventListener('message', (e) => {
					switch (e.data.type) {
						case 'update':
							this.order.lines = JSON.parse(e.data.data).lines;
							for (const id in this.order.lines) {
								Object.defineProperty(this.order.lines[id], 'amount', {
									get() {
										return this.quantity * this.price;
									}
								});
							};
							break;
					}
				})
			},
			quantityClass(item) {
				let result = 'col-2 text-end align-self-center';
				if (item.ticket) {
					result = result + ' has-ticket'
				}
				return result;
			},
			quantityStyle(item) {
				if (item.ticket && item.colour) {
					return { backgroundColor: item.colour };
				} else {
					return null;
				}
			}
		}">
		<div class="mt-3" style="min-height: 100vh;">
			<template x-for="item in actuallyOrdered">
			<div class="row">
				<div class="d-none d-sm-block col-sm-3 col-md-2 h1 text-center mb-0 align-self-center" x-text="item.label"></div>
				<div class="col-4 col-sm-3 col-md-4 align-self-center" x-text="item.title"></div>
				<div class="col-3 col-sm-2 text-end align-self-center" x-text="item.price.toFixed(2).replace('.', ',')"></div>
				<div :class="quantityClass(item)" :style="quantityStyle(item)" x-text="item.quantity"></div>
				<div class="col-3 col-sm-2 text-end align-self-center" x-text="item.amount.toFixed(2).replace('.', ',')"></div>
			</div>
			</template>
		</div>
		<div class="row sticky-bottom pb-3 mt-3">
			<hr />
			<div class="d-none d-sm-block col-sm-3 col-md-2 mb-0 align-self-center display-6"></div>
			<div class="col-4 col-sm-3 col-md-4 align-self-center display-6"></div>
			<div class="col-3 col-sm-2 text-end align-self-center display-6">{{ 'app.sales.total'|trans }}</div>
			<div class="col-2 text-end align-self-center display-6" x-text="order.quantity"></div>
			<div class="col-3 col-sm-2 text-end align-self-center display-6" x-text="order.amount.toFixed(2).replace('.', ',')"></div>
		</div>
	</div>
{% endblock %}

{% block javascripts %}
	<script src="{{ assets_host }}/alpinejs/3.14.9/cdn.min.js" integrity="sha512-KSdieUYxSxr/laB3Bh5TP8GAng49b2qRfdcnFvh8OuPpPgksA189OQ9v1A3gIz5P9s3A4aXMe5uiHLMfla60Uw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
{% endblock %}